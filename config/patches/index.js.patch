--- ./index.js	2015-08-22 07:32:39.000000000 -0500
+++ ./index_new.js	2017-03-07 17:22:52.000000000 -0600
@@ -43,15 +43,26 @@
  * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
  * get the Object implementation, which is slower but behaves correctly.
  */
+
+Buffer.UINT8_ARRAY_SUPPORT = (function () {
+function Bar () {}
+try {
+ var arr = new Uint8Array(1)
+ arr.foo = function () { return 42 }
+ arr.constructor = Bar
+ return arr.foo() === 42 && // typed array instances can be augmented
+     arr.constructor === Bar && // constructor can be set
+     typeof arr.subarray === 'function'
+} catch (e) {
+ return false
+}
+})()
+
 Buffer.TYPED_ARRAY_SUPPORT = (function () {
-  function Bar () {}
+  if(!Buffer.UINT8_ARRAY_SUPPORT) return false
   try {
     var arr = new Uint8Array(1)
-    arr.foo = function () { return 42 }
-    arr.constructor = Bar
-    return arr.foo() === 42 && // typed array instances can be augmented
-        arr.constructor === Bar && // constructor can be set
-        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
+    return typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
         arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
   } catch (e) {
     return false
@@ -59,7 +70,7 @@
 })()
 
 function kMaxLength () {
-  return Buffer.TYPED_ARRAY_SUPPORT
+  return Buffer.UINT8_ARRAY_SUPPORT
     ? 0x7fffffff
     : 0x3fffffff
 }
@@ -102,7 +113,7 @@
 
 function fromNumber (that, length) {
   that = allocate(that, length < 0 ? 0 : checked(length) | 0)
-  if (!Buffer.TYPED_ARRAY_SUPPORT) {
+  if (!Buffer.UINT8_ARRAY_SUPPORT) {
     for (var i = 0; i < length; i++) {
       that[i] = 0
     }
@@ -174,7 +185,7 @@
 }
 
 function fromArrayBuffer (that, array) {
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     // Return an augmented `Uint8Array` instance, for best performance
     array.byteLength
     that = Buffer._augment(new Uint8Array(array))
@@ -213,7 +224,7 @@
 }
 
 function allocate (that, length) {
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     // Return an augmented `Uint8Array` instance, for best performance
     that = Buffer._augment(new Uint8Array(length))
   } else {
@@ -454,7 +465,7 @@
     return arrayIndexOf(this, val, byteOffset)
   }
   if (typeof val === 'number') {
-    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
+    if (Buffer.UINT8_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
       return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
     }
     return arrayIndexOf(this, [ val ], byteOffset)
@@ -1003,7 +1014,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
-  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
+  if (!Buffer.UINT8_ARRAY_SUPPORT) value = Math.floor(value)
   this[offset] = value
   return offset + 1
 }
@@ -1020,7 +1031,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     this[offset] = value
     this[offset + 1] = (value >>> 8)
   } else {
@@ -1033,7 +1044,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     this[offset] = (value >>> 8)
     this[offset + 1] = value
   } else {
@@ -1053,7 +1064,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     this[offset + 3] = (value >>> 24)
     this[offset + 2] = (value >>> 16)
     this[offset + 1] = (value >>> 8)
@@ -1068,7 +1079,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     this[offset] = (value >>> 24)
     this[offset + 1] = (value >>> 16)
     this[offset + 2] = (value >>> 8)
@@ -1123,7 +1134,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
-  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
+  if (!Buffer.UINT8_ARRAY_SUPPORT) value = Math.floor(value)
   if (value < 0) value = 0xff + value + 1
   this[offset] = value
   return offset + 1
@@ -1133,7 +1144,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     this[offset] = value
     this[offset + 1] = (value >>> 8)
   } else {
@@ -1146,7 +1157,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     this[offset] = (value >>> 8)
     this[offset + 1] = value
   } else {
@@ -1159,7 +1170,7 @@
   value = +value
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     this[offset] = value
     this[offset + 1] = (value >>> 8)
     this[offset + 2] = (value >>> 16)
@@ -1175,7 +1186,7 @@
   offset = offset | 0
   if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
   if (value < 0) value = 0xffffffff + value + 1
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
+  if (Buffer.UINT8_ARRAY_SUPPORT) {
     this[offset] = (value >>> 24)
     this[offset + 1] = (value >>> 16)
     this[offset + 2] = (value >>> 8)
@@ -1306,7 +1317,7 @@
  */
 Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
   if (typeof Uint8Array !== 'undefined') {
-    if (Buffer.TYPED_ARRAY_SUPPORT) {
+    if (Buffer.UINT8_ARRAY_SUPPORT) {
       return (new Buffer(this)).buffer
     } else {
       var buf = new Uint8Array(this.length)
